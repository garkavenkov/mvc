#!/usr/bin/env php
<?php

require './core/init.php';

require ROOT_DIR . '/vendor/autoload.php';

use AdvancedPrint\AdvancedPrint as AP;
use MVC\Framework\Core\Routing\Router;

/**
 * Available commands
 */
$commands = [
  'server' => 'startServer',
  'make:controller' => 'makeController',
  'make:model'  =>  'makeModel',
  'route:list'  =>  'routeList',
];

if ($argc == 1) {  
  echo  "Usage:\n";
  echo  "  command [argument] <options>\n";
  exit(0);
} else {
  array_shift($argv);
}

$command = array_shift($argv);

if (array_key_exists($command, $commands)) {
  call_user_func($commands[$command], $argv);    
} else {    
  exit("Command $command does not exists.\n");
}

/**
 * Start local server at address: $host:$port 
 * Entry point is located by $www
 *
 * @param array $argv Arguments
 * @return void
 */
function startServer(array $argv) {
  echo "Starting local server\n";
  
  $host = array_shift($argv) ?: '127.0.0.1' ;
  $port = array_shift($argv) ?: 8080;
  $www = array_shift($argv)  ?: 'public';
 
  while(true) 
  {
    $connection = @fsockopen($host, $port);    
    if (is_resource($connection)) {      
      echo "Port: $port is already used. Will try next port\n";
      $port++;
      fclose($connection);
    } else {
      
      break;
    }    
  }
  exec("php -S $host:$port -t $www");
}

/**
 * Make namespace, file's name and path from given string
 *
 * @param string $name  Class name
 * @return array        File information
 */
function prepareName(string $name): array 
{
  $file_path = array_map(
    function($p) { return ucfirst($p);}, 
    explode('/', $name)
  );    

  $file_name =  array_pop($file_path);

  $namespace = join('\\', $file_path);
  if ($namespace !== '') {
    $namespace = '\\' . $namespace;
  }

  $file_path = join(DIRECTORY_SEPARATOR, $file_path);
  if ($file_path !== '') {
    $file_path = '/' . $file_path;
  }

  return array('namespace'=>$namespace, 'file_name' => $file_name, 'file_path' => $file_path);
}


function parseOptions(array &$arguments, string $short_options ='', array $long_options = [])
{
  $short_options = explode(',', $short_options);
  echo "Arguments: \n";
  print_r($arguments);
  // print_r($long_options);
  $long_options = array_map(function($o) {return '--' .$o;}, $long_options);
  // foreach($long_options as $option) {
  //   if ($option == 'api') {
  //     $option = '--' . $option;
      

  //     if (in_array($option, $arguments)) {
  //       echo "Option $option is passed as an argument\n";
  //     }
  //   }
  // }
  echo "Options: \n";
  print_r($long_options);
  die();
  
  // return [];
}

/**
 * Create controller
 *
 * @param array $argv Arguments
 * 
 * @return void
 *
 * TODO:
 * - parsing arguments.
 * - Check if there are parameters --api, --resource/-r, --routes, --model 
 */
function makeController(array $argv) {      
  
  // available options:
  // --resource
  // --api
  // --model=<Model>

  if (count($argv) == 0) {
    echo "\n";
    AP::printLn("[B_Red]Error:[Reset] Enter controller name");
    echo "\n";
    die();
  }
  
  $controller_name = array_shift($argv);
  
  $file_info = prepareName($controller_name);
 
  $methods = [
    'index' => [
      'comment' => 'Display a listing of the resource.'
    ],
    'show' => [
      'comment' =>  'Display the specified resource.',
      'params'  =>  ['int|$id']
    ],
    'create'  => [
      'comment' => 'Show the form for creating a new resource.',
    ], 
    'store' =>  [
      'comment' =>  'Show the form for creating a new resource.',
      // 'params'  =>  ['Request|$request'],
    ], 
    'edit'  =>  [
      'comment' =>  'Show the form for editing the specified resource.',
      'params'  =>  ['int|$id']
    ],
    'update'  => [
      'comment' => 'Update the specified resource in storage.',
      // 'params'  => ['Request|$request', 'int|$id'],
      'params'  => ['int|$id'],
    ],   
    'destroy' =>  [
      'comment' => 'Remove the specified resource from storage.',
      'params'  =>  ['int|$id']
    ]
  ];
 
  $type = '';
  foreach($argv as $argument) {    
    if (in_array($argument, ['--resource', '--api'])) {
      $type = $argument;
      // echo $argv[$argument] . PHP_EOL;
      $index =  array_search($argument, $argv);
      unset($argv[$index]);
    }
    // TODO add --model DI into route and controlelr
    // if (str_starts_with($argument, '--model')) {
    //   $chunks = explode('=', $argument, 2);
    //   if (isset($chunks[1])) {
    //     $model = $chunks[1];
    //   } else {
    //     echo "--model=<Model>\n";        
    //     die();
    //   }
    // }
  }  
    
  // get     posts           PostsController@index      -r | --api
  // get     posts/{id}      PostsController@show       -r | --api
  // get     posts/{id}/edit PostsController@edit       -r 
  // get     posts/create    PostsController@create     -r
  // post    posts           PostsController@store      -r | --api
  // patch   posts/1         PostsController@update     -r | --api
  // delete  posts/1         PostsController@destroy    -r | --api

  $content  = "<?php\n";
  $content .= "\n";
  $content .= "namespace App\Http\Controllers" . $file_info['namespace'] . ";\n";  
  $content .= "\n";
  $content .= "use MVC\Framework\Base\Controller;\n";
  $content .= "\n";
  $content .= "class {$file_info['file_name']} extends Controller\n";
  $content .= "{\n";
  $content .= "\n";
    
  if ($type == '--api' || $type == '--resource') {
    if ($type == "--api") {        
      unset($methods['create']);
      unset($methods['edit']);    
    } 
    foreach($methods as $method => $info) {    
      if ($info['comment']) {
        $content .= "   /**\n";      
        $content .= "    * {$info['comment']}\n";
        $params = [];
        if (isset($info['params'])) {
          $content .= "    *\n";
          foreach($info['params'] as $param) {
            $parts = explode('|', $param);
            $content .= "    * @param\t$parts[0]\t\t{$parts[1]}\n";
            $params[] = $parts[1];
          }
        } else {
          $content .= "    *\n";
        }
        $content .= "    * @return\tHttp\n";
        $content .= "    */\n";      
      }    
      $content .= "   public function $method(" . join(', ', $params) .")\n";
      $content .= "   {\n";
      $content .= "   }\n";
      $content .= "   \n";
    }
  }

  $content .= "}\n";
  
  if (createFile($file_info['file_name'], 'Http/Controllers' . $file_info['file_path'], $content, 'Controller')) {
    echo "\n";
    AP::printLn("Controller [B_Green]{$file_info['file_name']}[Reset] has been successfully created.");
    echo "\n";
  }
  
}

/**
 * Create model
 *
 * @param array $argv Arguments
 * 
 * @return void
 */
function makeModel(array $argv) {  

  if (count($argv) == 0) {
    echo "\n";
    AP::printLn("[B_Red]Error:[Reset]Укажите наименование модели.");
    echo "\n";
    die();
  }  
  
  $model_name = array_shift($argv);

  $file_info = prepareName($model_name);

  $content  = "<?php\n";
  $content .= "\n";
  $content .= "namespace App\Models" . $file_info['namespace'] . ";\n";
  $content .= "\n";
  $content .= "use MVC\Framework\Base\Model;\n";
  $content .= "\n";
  $content .= "class {$file_info['file_name']} extends Model\n";
  $content .= "{\n";
  $content .= "\n";  
  $content .= "}\n";

  if (createFile($file_info['file_name'], 'Models' . $file_info['file_path'], $content, 'model')) {
    echo "\n";
    AP::printLn("Model [B_Green]{$file_info['file_name']}[Reset] has been successfully created.");
    echo "\n";
  }  
}


// Create File
function createFile($name, $path, $content, $type) { 
  
  $path_segments = array_merge([ROOT_DIR, 'app']);
  

  $file_path =  join(DIRECTORY_SEPARATOR, $path_segments);  
  $file_path =  $file_path . '/' . $path;
  
  if (!file_exists($file_path)) {    
    if (!mkdir($file_path, 0777, true)) {
      echo "\n";
      AP::printLn("[B_Red]Error:[Reset]Cannot create directory " . $file_path. " Check your rights on this folder.");
      echo "\n";
      die();
    }
  }
  
  $file_name = $file_path . DIRECTORY_SEPARATOR . $name . '.php';
  
  if (file_exists($file_name)) {
    // echo ucfirst($type) . " with this name is already exists.\n";
    echo "\n";
    AP::printLn("[B_Red]Error:[Reset] ". ucfirst($type) . " with name '[B_Yellow]{$name}[Reset]' is already exists.");
    echo "\n";
    die();    
  }

  $fh = fopen($file_name, 'w+');
  if (!$fh) {
    echo "\n";
    AP::printLn("[B_Red]Error:[Reset]Cannot create " . lcfirst($type) . ". Check rights on catalog.");
    echo "\n";
    die();
  }
  
  if (fwrite($fh, $content) === FALSE) {
    echo "Не могу произвести запись в файл ($file_name)\n";
    fclose($fh);
    return false;
  }
  
  fclose($fh);  
  return true;
}

/**
 * Print routing table based on search parameters
 * --request=<GET,POST,PATCH,DELETE>
 * --controller=<ClassName>
 * --action=<index,show,store,create etc.>
 *
 * @param array $argv Arguments
 * 
 * @return void
 */
function routeList(array $argv) {  
  Router::loadRoutes();  

  $request = '';
  $controller = '';
  $action = '';
  
  if ($argv) {    
    foreach($argv as $argument) {
      $parts = explode('=', $argument);      
      if (count($parts) == 2) {
        if (($parts[0] == '--request') || ($parts[0] == '-r') )
        {
          $request = $parts[1];
        }
        if (($parts[0] == '--controller') || ($parts[0] == '-c')) {
          $controller = $parts[1];
        }
        if (($parts[0] == '--action') || ($parts[0] == '-a')) {
          $action = $parts[1];
        }
      }      
    }
  }   
  $routes = Router::list(request: $request, controller: $controller, action: $action);
  
  if ($routes) {
    foreach($routes as $route) {
      AP::print("[B_Yellow]|");
      AP::print("[Blue]" . str_pad($route['request'], 8, ' '));
      AP::print("[B_Yellow]|")  ;
      AP::print("[Green]" . str_pad($route['url'], 20, ' '));
      AP::print("[B_Yellow]|");
      if (isset($route['callable'])) {    
        AP::print("[Blue]" . str_pad('funciton', 70, ' '));          
      } else {
        $controller_length = strlen($route['controller']);       
        AP::print("[Blue]" . $route['controller']);
        AP::print("[White]@");
        AP::print("[Red]" . str_pad($route['action'], 70 - ($controller_length +1), ' '));      
      }
      AP::printLn("[B_Yellow]|")  ;      
    }
  } else {
    echo "\n";
    AP::printLn("[B_Yellow]Routing table is empty.");
    echo "\n";
  }
}

?>